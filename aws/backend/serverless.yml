service: backend

plugins:
  - serverless-offline

#frameworkVersion: '3'

custom:
  allowedHeaders:
    - Accept
    - Content-Type
    - Content-Length
    - app_user_name


provider:
  name: aws
  runtime: nodejs12.x
  region: eu-central-1
  stage:  prod
  memorySize: 128
  timeout:  2
  endpointType: regional
  environment:
    NOTES_TABLE: NotesWebApp-Table
  iamRoleStatements:
    - Effect: Allow
      Action: 
        - dynamodb:Query
        - dynamodb:PutItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.NOTES_TABLE}"

functions:
  add_note:
    handler: api_functions/add_note.handler
    description: POST /note
    events:
      - http:
          path: note
          method: post
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}

  update_note:
    handler: api_functions/update_note.handler
    description: PATCH /note
    events:
      - http:
          path: note
          method: patch
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}

  delete_note:
    handler: api_functions/delete_note.handler
    description: DELETE /note
    events:
      - http:
          path: note/n/{note_id}
          method: delete
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}

  get_note:
    handler: api_functions/get_note.handler
    description: GET /note/n/{note_id}
    events:
      - http:
          path: note/n/{note_id}
          method: get
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}

  get_notes:
    handler: api_functions/get_notes.handler
    description: GET /notes
    events:
      - http:
          path: notes
          method: get
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}


resources:
  Resources:
    NotesTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.NOTES_TABLE}
        AttributeDefinitions:
          - AttributeName: user_name
            AttributeType: S
          - AttributeName: time
            AttributeType: N
          - AttributeName: note_id
            AttributeType: S
        KeySchema:
          - AttributeName: user_name
            KeyType: HASH
          - AttributeName: time
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: note_id-index
            KeySchema:
              - AttributeName: note_id
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1